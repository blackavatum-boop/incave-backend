# C:\incave\app.py
import streamlit as st

st.set_page_config(layout="wide")

st.title("‡∏ñ‡πâ‡∏≥‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå AI: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏à‡πâ‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üåø")
st.write("‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á")

# --- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏ó‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ---
st.page_link("pages/consult_ai.py", label="‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ AI ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á", icon="üí¨")
st.markdown("---") 
# ------------------------------------------

@st.cache_data
def get_quiz_data():
    questions = [
        {"question": "1. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", "options": {"A": "‡∏ú‡∏≠‡∏° ‡πÅ‡∏´‡πâ‡∏á ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô", "B": "‡∏™‡∏°‡∏™‡πà‡∏ß‡∏ô ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "C": "‡∏≠‡πâ‡∏ß‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà ‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏ô‡πà‡∏ô", "D": "‡∏ú‡∏¥‡∏ß‡πÅ‡∏î‡∏á ‡∏Ç‡∏µ‡πâ‡∏£‡πâ‡∏≠‡∏ô ‡∏°‡∏µ‡πÄ‡∏´‡∏á‡∏∑‡πà‡∏≠‡∏ö‡πà‡∏≠‡∏¢"}},
        {"question": "2. ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", "options": {"A": "‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏™‡∏à‡∏±‡∏î ‡πÄ‡∏ú‡πá‡∏î ‡πÄ‡∏Ñ‡πá‡∏°", "B": "‡∏Å‡∏¥‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏≠‡∏¢‡∏π‡πà‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏Å", "C": "‡∏ä‡∏≠‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏±‡∏ô ‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏õ‡πâ‡∏á", "D": "‡∏´‡∏¥‡∏ß‡∏ö‡πà‡∏≠‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡∏à‡∏∞‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î"}},
        {"question": "3. ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô", "options": {"A": "‡∏´‡∏•‡∏±‡∏ö‡∏¢‡∏≤‡∏Å ‡∏´‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏•‡∏∂‡∏Å", "B": "‡∏ô‡∏≠‡∏ô‡∏ô‡∏≤‡∏ô ‡∏ï‡∏∑‡πà‡∏ô‡∏¢‡∏≤‡∏Å", "C": "‡∏á‡πà‡∏ß‡∏á‡∏á‡πà‡∏≤‡∏¢ ‡∏ô‡∏≠‡∏ô‡∏ö‡πà‡∏≠‡∏¢", "D": "‡∏ï‡∏∑‡πà‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏∂‡∏Å ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏£‡πâ‡∏≠‡∏ô"}},
        {"question": "4. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "options": {"A": "‡∏ä‡∏≠‡∏ö‡∏•‡∏°‡∏û‡∏±‡∏î ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ó", "B": "‡∏ä‡∏≠‡∏ö‡πÄ‡∏¢‡πá‡∏ô‡∏™‡∏ö‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏´‡∏ô‡∏≤‡∏ß", "C": "‡πÅ‡∏û‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô ‡∏´‡∏ô‡∏≤‡∏ß‡∏á‡πà‡∏≤‡∏¢", "D": "‡∏£‡πâ‡∏≠‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡πÄ‡∏´‡∏á‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢"}},
        {"question": "5. ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß", "options": {"A": "‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÑ‡∏ß ‡∏ä‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡πá‡∏ß", "B": "‡∏ä‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡πÑ‡∏°‡πà‡∏£‡∏µ‡∏ö‡∏£‡πâ‡∏≠‡∏ô", "C": "‡∏Ç‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏à ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πâ‡∏ô‡πâ‡∏≠‡∏¢", "D": "‡∏Å‡∏£‡∏∞‡∏™‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏™‡πà‡∏≤‡∏¢ ‡∏Ç‡∏¢‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î"}},
        {"question": "6. ‡∏™‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡πÉ‡∏à/‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå", "options": {"A": "‡∏Ñ‡∏¥‡∏î‡∏°‡∏≤‡∏Å ‡∏´‡∏ß‡∏±‡πà‡∏ô‡πÑ‡∏´‡∏ß‡∏á‡πà‡∏≤‡∏¢", "B": "‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡πÄ‡∏¢‡∏∑‡∏≠‡∏Å‡πÄ‡∏¢‡πá‡∏ô ‡πÉ‡∏à‡∏î‡∏µ", "C": "‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡∏Ç‡∏µ‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏à", "D": "‡∏Ç‡∏µ‡πâ‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏£‡πâ‡∏≠‡∏ô"}},
        {"question": "7. ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏ö‡πà‡∏≠‡∏¢", "options": {"A": "‡∏õ‡∏ß‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢ ‡∏•‡∏°‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏¢‡∏≠‡∏∞", "B": "‡∏õ‡∏ß‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡∏±‡∏Å‡πÜ", "C": "‡∏ö‡∏ß‡∏°‡∏ô‡πâ‡∏≥ ‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢", "D": "‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏Ç‡πâ ‡∏ï‡∏±‡∏ß‡∏£‡πâ‡∏≠‡∏ô ‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß‡∏ö‡πà‡∏≠‡∏¢"}}
    ]
    element_map = {'A': '‡∏•‡∏°', 'B': '‡∏î‡∏¥‡∏ô', 'C': '‡∏ô‡πâ‡∏≥', 'D': '‡πÑ‡∏ü'}
    results_guide = {
        '‡∏•‡∏°': {'description': '‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÑ‡∏ß ‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏á‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏¢‡∏≠‡∏∞', 'behavior': '‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏™‡∏°‡∏≤‡∏ò‡∏¥ ‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥', 'herbs': '‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏¥‡∏á, ‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢, ‡∏Å‡∏£‡∏∞‡∏ä‡∏≤‡∏¢'},
        '‡∏î‡∏¥‡∏ô': {'description': '‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏ä‡πâ‡∏≤', 'behavior': '‡∏Ñ‡∏ß‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡πà‡∏á‡∏à‡πá‡∏≠‡∏Å‡∏Å‡∏¥‡πâ‡∏á', 'herbs': '‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ö‡∏¢‡πà‡∏≤‡∏ô‡∏≤‡∏á, ‡∏°‡∏∞‡∏£‡∏∏‡∏°'},
        '‡∏ô‡πâ‡∏≥': {'description': '‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏•‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏á‡πà‡∏ß‡∏á‡∏á‡πà‡∏≤‡∏¢', 'behavior': '‡∏Ñ‡∏ß‡∏£‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏£‡∏±‡∏ö‡πÅ‡∏î‡∏î ‡πÄ‡∏î‡∏¥‡∏ô‡∏£‡∏¥‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥', 'herbs': '‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ, ‡∏ö‡∏±‡∏ß‡∏ö‡∏Å, ‡∏Å‡∏£‡∏∞‡πÄ‡∏à‡∏µ‡πä‡∏¢‡∏ö'},
        '‡πÑ‡∏ü': {'description': '‡∏û‡∏•‡∏±‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç ‡πÄ‡∏£‡πà‡∏≤‡∏£‡πâ‡∏≠‡∏ô ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏™‡∏π‡∏á ‡πÅ‡∏ï‡πà‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î‡∏á‡πà‡∏≤‡∏¢', 'behavior': '‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏î‡∏î‡∏à‡∏±‡∏î ‡∏ù‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ò‡∏¥', 'herbs': '‡πÄ‡∏ä‡πà‡∏ô ‡∏ü‡πâ‡∏≤‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡πÇ‡∏à‡∏£, ‡∏£‡∏≤‡∏á‡∏à‡∏∑‡∏î, ‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤'}
    }
    return questions, element_map, results_guide

def analyze_and_display_results(scores, results_guide):
    if not scores: return
    max_score = max(scores.values())
    top_elements = [element for element, score in scores.items() if score == max_score]
    st.balloons()
    st.header("üßæ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:")
    primary_element = top_elements[0]
    result = results_guide[primary_element]
    st.subheader(f"üîπ ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ ‚Äú‡∏ò‡∏≤‡∏ï‡∏∏‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‚Äù ‡∏Ñ‡∏∑‡∏≠: {primary_element}")
    st.markdown("---")
    st.markdown(f"### üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏≤‡∏ï‡∏∏ {primary_element}:")
    st.markdown(f"**‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞:** {result['description']}")
    st.markdown(f"**‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°:** {result['behavior']}")
    st.markdown(f"**‡∏™‡∏°‡∏∏‡∏ô‡πÑ‡∏û‡∏£:** {result['herbs']}")
    st.session_state['user_element'] = primary_element
    st.markdown("---")
    st.info("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")
    st.page_link("pages/consult_ai.py", label=f"‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏≤‡∏ï‡∏∏ {primary_element} ‡∏ï‡πà‡∏≠", icon="üí¨")

questions, element_map, results_guide = get_quiz_data()

with st.form("quiz_form"):
    user_answers = []
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠")
    for i, q_data in enumerate(questions):
        st.subheader(f"‚ùì {q_data['question']}")
        answer = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:", options=q_data['options'].keys(), format_func=lambda key: f"{key}: {q_data['options'][key]}", key=f"q{i}", label_visibility="collapsed")
        user_answers.append(answer)
    submitted = st.form_submit_button("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")

if submitted:
    scores = {'‡∏•‡∏°': 0, '‡∏î‡∏¥‡∏ô': 0, '‡∏ô‡πâ‡∏≥': 0, '‡πÑ‡∏ü': 0}
    for answer_key in user_answers:
        element = element_map[answer_key]
        scores[element] += 1
    analyze_and_display_results(scores, results_guide)